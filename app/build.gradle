apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'project-report'

apply from: "version.gradle"

android {
    def versionProps = getVersionProps()
    def versionNameDebugSuffix = getAppVersionNameDebugSuffix(versionProps)

    compileSdkVersion androidCompileSdkVersion.toInteger()
    buildToolsVersion androidBuildToolsVersion


    defaultConfig {
        applicationId "com.cabbage.scaffold"

        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion

        versionCode getAppVersionCode(versionProps)
        versionName getAppVersionName(versionProps)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        vectorDrawables.useSupportLibrary = true
    }

    File propsFile = rootProject.file("keystore.properties")
    boolean localKeyStore = propsFile.exists()
    if (localKeyStore) {
        println 'Using local key store'

        Properties properties = new Properties()
        properties.load(propsFile.newDataInputStream())

        signingConfigs {
            debug {
                storeFile = file(properties.getProperty("debugStoreFile"))
                storePassword = properties.getProperty("debugStorePassword")
                keyAlias = properties.getProperty("debugKeyAlias")
                keyPassword = properties.getProperty("debugKeyPassword")
            }

            release {
                storeFile = file(properties.getProperty("releaseStoreFile"))
                storePassword = properties.getProperty("releaseStorePassword")
                keyAlias = properties.getProperty("releaseKeyAlias")
                keyPassword = properties.getProperty("releaseKeyPassword")

            }
        }
    } else {
        println "No local 'keystore.properties'"
    }

    flavorDimensions "endpoint"

    productFlavors {
        Staging {
            dimension "endpoint"
            applicationIdSuffix ".internal"
        }

        Production {
            dimension "endpoint"
        }
    }

    buildTypes {
        debug {
            debuggable true
            versionNameSuffix versionNameDebugSuffix

            if (localKeyStore) signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (localKeyStore) signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation "com.google.android.material:material:${google.material}"
    implementation "androidx.appcompat:appcompat:${androidx.appcompat}"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:${androidx.lifecycle}"
    kapt "androidx.lifecycle:lifecycle-compiler:${androidx.lifecycle}"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxjava:${rxJava2.java}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxJava2.android}"
    implementation "io.reactivex.rxjava2:rxkotlin:${rxJava2.kotlin}"

    implementation "com.tbruyelle.rxpermissions2:rxpermissions:${rxJava2.permission}"
    implementation "com.f2prateek.rx.preferences2:rx-preferences:${rxJava2.perferences}"

    // Dagger 2
    implementation "com.google.dagger:dagger:${dagger.core}"
    kapt "com.google.dagger:dagger-compiler:${dagger.core}"

    // To inject Activities components like activities or fragments
    implementation "com.google.dagger:dagger-android:${dagger.android}"
    kapt "com.google.dagger:dagger-android-processor:${dagger.android}"

    // To use the support libraries
    implementation "com.google.dagger:dagger-android-support:${dagger.android}"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // http://facebook.github.io/stetho/
    implementation "com.facebook.stetho:stetho:${stetho}"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}